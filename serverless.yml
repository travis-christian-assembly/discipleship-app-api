service: discipleship-app-api

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline

custom:
  stage: ${opt:stage}

provider:
  name: aws
  profile: Discipleship
  region: us-east-1
  runtime: nodejs8.10
  # To load environment variables externally
  # rename env.example to env.yml and uncomment
  # the following line. Also, make sure to not
  # commit your env.yml.
  #
  #environment: ${file(env.yml):${self:provider.stage}}

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-1:*:*"

functions:
  putCourse:
    handler: src/api/put_course.main
    events:
      - http:
          path: courses/{courseId}
          method: put
          cors: true
          authorizer: aws_iam
  getCourse:
    handler: src/api/get_course.main
    events:
      - http:
          path: courses/{courseId}
          method: get
          cors: true
          authorizer: aws_iam
  listCourses:
    handler: src/api/list_courses.main
    events:
      - http:
          path: courses
          method: get
          cors: true
          authorizer: aws_iam
  deleteCourse:
    handler: src/api/delete_course.main
    events:
      - http:
          path: courses/{courseId}
          method: delete
          cors: true
          authorizer: aws_iam

resources:
  - ${file(cloud_formation/discipleship.yml)}
